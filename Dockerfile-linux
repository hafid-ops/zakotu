FROM python:3.10-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive
ENV PATH="/app:${PATH}"

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Core system tools
    curl \
    wget \
    git \
    ca-certificates \
    build-essential \
    pkg-config \
    # Media processing
    ffmpeg \
    imagemagick \
    # Audio processing
    libsndfile1 \
    libsndfile1-dev \
    espeak-ng \
    espeak-ng-data \
    libespeak-ng1 \
    # Font support
    fonts-liberation \
    fonts-dejavu-core \
    fontconfig \
    # Browser automation dependencies
    libnss3 \
    libnspr4 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libatspi2.0-0 \
    libxcomposite1 \
    libxdamage1 \
    libxrandr2 \
    libxss1 \
    libgtk-3-0 \
    libgbm-dev \
    libxshmfence1 \
    # Additional dependencies
    bc \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Configure ImageMagick policy for video processing
RUN mkdir -p /etc/ImageMagick-6 && \
    echo '<policymap>' > /etc/ImageMagick-6/policy.xml && \
    echo '  <policy domain="resource" name="memory" value="512MiB"/>' >> /etc/ImageMagick-6/policy.xml && \
    echo '  <policy domain="resource" name="disk" value="2GiB"/>' >> /etc/ImageMagick-6/policy.xml && \
    echo '  <policy domain="resource" name="time" value="300"/>' >> /etc/ImageMagick-6/policy.xml && \
    echo '  <policy domain="resource" name="file" value="768"/>' >> /etc/ImageMagick-6/policy.xml && \
    echo '  <policy domain="resource" name="area" value="128MP"/>' >> /etc/ImageMagick-6/policy.xml && \
    echo '  <policy domain="coder" rights="read|write" pattern="PDF" />' >> /etc/ImageMagick-6/policy.xml && \
    echo '  <policy domain="coder" rights="read|write" pattern="LABEL" />' >> /etc/ImageMagick-6/policy.xml && \
    echo '  <policy domain="coder" rights="read|write" pattern="PNG" />' >> /etc/ImageMagick-6/policy.xml && \
    echo '  <policy domain="coder" rights="read|write" pattern="JPEG" />' >> /etc/ImageMagick-6/policy.xml && \
    echo '  <policy domain="path" rights="read|write" pattern="@*" />' >> /etc/ImageMagick-6/policy.xml && \
    echo '</policymap>' >> /etc/ImageMagick-6/policy.xml

WORKDIR /app

# Copy requirements first for better layer caching
COPY requirements-linux.txt ./

# Install Python dependencies with optimizations
RUN python -m pip install --upgrade pip setuptools wheel && \
    # Install dependencies in order of likelihood to change
    pip install --no-cache-dir "numpy>=1.24.0,<2.0" && \
    pip install --no-cache-dir python-dotenv requests tqdm && \
    pip install --no-cache-dir "Pillow>=9.5.0,<10.0" && \
    pip install --no-cache-dir soundfile vosk pysbd && \
    pip install --no-cache-dir ffmpeg-python && \
    pip install --no-cache-dir moviepy==1.0.3 && \
    # Install PyTorch CPU version explicitly
    pip install --no-cache-dir torch==2.0.1 torchaudio==2.0.2 torchvision==0.15.2 \
        --index-url https://download.pytorch.org/whl/cpu && \
    pip install --no-cache-dir onnxruntime>=1.15.0 && \
    pip install --no-cache-dir kokoro_onnx==0.4.9 && \
    pip install --no-cache-dir transformers==4.33.3 diffusers==0.23.0 && \
    pip install --no-cache-dir google-generativeai==0.6.0 && \
    pip install --no-cache-dir "playwright>=1.40.0" && \
    pip install --no-cache-dir "pydantic>=2.0.0,<3.0.0" && \
    pip install --no-cache-dir scikit-image && \
    # Clean pip cache
    pip cache purge

# Copy application code
COPY . .

# Create necessary directories with proper permissions
RUN mkdir -p \
    data/models \
    data/temp \
    data/audio \
    generatedVoice \
    generatedVideo \
    output/generatedStory \
    output/generatedImage/short \
    output/generatedThumbnail \
    output/generatedVideo \
    output/generatedVoice \
    output/test_voices \
    logs \
    config && \
    chmod -R 755 /app

# Set up MoviePy to use system ImageMagick
RUN echo "from moviepy.config import change_settings; change_settings({'IMAGEMAGICK_BINARY': 'convert'})" | python

# Install Playwright browsers (done after copying to use cache better)
RUN playwright install --with-deps chromium || \
    (apt-get update && apt-get install -y chromium-browser && playwright install chromium)

# Make scripts executable
COPY docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python -c "import os; exit(0 if os.path.exists('/app') else 1)"

# Set up entrypoint
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

# Default command
CMD ["python", "src/main.py"]
